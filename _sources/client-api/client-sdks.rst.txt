Alan Client SDKs
================

With the Alan Client SDK, you can integrate Alan with any app built with:

-  :doc:`Web <web/web-api>`: :doc:`React <web/react>`,
   :doc:`Angular <web/angular>`, :doc:`Vue <web/vue>`,
   :doc:`Ember <web/ember>`,
   :doc:`JavaScript <web/vanilla>`,
   :doc:`Electron <web/electron>`
-  :doc:`iOS <ios/ios-api>`: Swift and Objective-C
-  :doc:`Android <android/android-api>`: Kotlin and Java
-  :doc:`Ionic <cross-platform/ionic>`
-  :doc:`Apache Cordova <cross-platform/cordova>`
-  :doc:`Flutter <cross-platform/flutter>`
-  :doc:`React Native <cross-platform/react-native>`
-  :doc:`Microsoft Power Apps <cross-platform/powerapps>`

Upon integration, your app gets the in-app voice assistant that can be activated with the Alan button displayed on top of the app's UI. The users can interact with the voice assistant by giving the voice commands defined in the script of your Alan Studio project.

To enable communication between Alan and the app and let you implement voice UX functionality on the client side, Alan exposes its methods and handlers:

-  :doc:`Client API methods <methods/common-api>`: enable communication between the client app and Alan and allow triggering
   voice activities on the client side.

-  :doc:`onCommand handler <methods/command-handler>`: handles commands sent from the voice scripts to the app. Use this handler to perform tasks or actions on voice commands in the client app: navigate between the app screens, highlight a UI element on the screen and so on.

-  :doc:`onButtonState handler <methods/state-handler>`: handles the Alan button state change events.

-  :doc:`onEvent handler <methods/event-handler>`: handles events received from Alan when the userâ€™s input is being recognized.

.. raw:: html

   <div id="purple-background"></div>


.. toctree::
   :maxdepth: 1
   :hidden:
   
   Integrating with Alan<integration>
   Client API methods<methods/common-api>
   Alan handlers<methods/handlers>
   
