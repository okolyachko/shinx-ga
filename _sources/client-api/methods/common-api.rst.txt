Client API methods
==================

Alan exposes a set of its Client API methods that you can use to enable
communication between the client app and Alan and to trigger voice
activities on the client side.

The methods below are supported on all platforms:

-  `setVisualState()`_
-  `callProjectApi()`_
-  `playText()`_
-  `playCommand()`_
-  `activate()`_
-  `deactivate()`_
-  `isActive()`_


setVisualState()
----------------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   setVisualState(visualStateData:object)

Method for setting the visual state. For details, see `Visual state <../../server-api/sending-data/visual-state>`__.

Parameters
~~~~~~~~~~

+-----------------------+------------+-------------------------------------------+
| **Name**              | **Type**   | **Description**                           |
+=======================+============+===========================================+
| ``visualStateData``   | object     | Object that represents the visual state   |
+-----------------------+------------+-------------------------------------------+


Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		//this is how you can set up a visual state
		alanBtnInstance.setVisualState({data:"your data"});

.. tabbed:: Objective-C

    .. code-block:: objective-c

	   /// Set up a visual state
	   - (void)setVisualState {
	     /// Provide any params
	     [self.button setVisualState:@{@"data":@"your data"}];
	   }

.. tabbed:: Swift

    .. code-block:: swift

	   /// Set up a visual state
	   func setVisualState() {
	     /// Provide any params
	     self.button.setVisualState(["data":"your data"])
	   }

.. tabbed:: Kotlin

    .. code-block:: java

	   /// Set up a visual state
	   fun setVisualState() {
	     /// Provide any params
	     val params = JSONObject()
	     try {
		   params.put("data", "your data")
	     } catch (e: JSONException) {
		   Log.e("AlanButton", e.message)
	     }
	     alanButton?.setVisualState(params.toString())
	   }		

.. tabbed:: Java

    .. code-block:: java

	   /// Set up a visual state
	   void setVisualState() {
	     /// Provide any params
	     JSONObject params = new JSONObject();
	     try {
		   params.put("data","your data");
	     } catch (JSONException e) {
		   Log.e("AlanButton", e.getMessage());
	     }
	     alanButton.setVisualState(params.toString());
	   }	
	   
.. tabbed:: Flutter

    .. code-block:: dart

        _MyHomePageState() {
          /// Set up a visual state
          void _setVisualState() {
            /// Provide any params with json
            var visualState = jsonEncode({"data":"your data"});
            AlanVoice.setVisualState(visualState);
          }
        }
    

.. tabbed:: Ionic

    .. code-block:: javascript

		var myAlanBtn = document.getElementById('myAlanBtn');

		myAlanBtn.componentOnReady().then(function () {
		  myAlanBtn.setVisualState({screen: 'homePage'});
		});
	   
.. tabbed:: React Native

    .. code-block:: javascript
	
	   /// Set up a visual state
	   setVisualState() {
	     /// Provide any params with json
	     AlanManager.setVisualState({"data":"your data"});
	   }
		

callProjectApi()
----------------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   callProjectApi(method:string, data:object, callback:function)
		

Method for calling a project API defined in the script in the Alan Studio project. For details, see `Project
API <../../server-api/sending-data/project-api>`__.

Parameters
~~~~~~~~~~

+----------------+------------+---------------------------------------------------------------------+
| **Name**       | **Type**   | **Description**                                                     |
+================+============+=====================================================================+
| ``method``     | string     | project API method name that is defined in the voice script         |
+----------------+------------+---------------------------------------------------------------------+
| ``data``       | object     | Any object with custom data that must be sent to the voice script   |
+----------------+------------+---------------------------------------------------------------------+
| ``callback``   | function   | Callback that can be called from the project API method             |
+----------------+------------+---------------------------------------------------------------------+

.. code:: js

    // Voice script where your method defined like this:
    projectAPI.setClientData = function(p, param, callback) {
      p.userData = param;
      callback();
    };

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

        // This is how you can call clientAPI.setClientData function
        alanBtnInstance.callProjectApi("setClientData", {value:"your data"}, function (error, result){
          // handle error and result here
        });

.. tabbed:: Objective-C

    .. code-block:: objective-c

	   /// Call projectAPI.funcName from Alan Studio script
	   - (void)callProjectApi {
	     /// Provide any params
	     [self.button callProjectApi:@"script::funcName" withData:@{@"data":@"your data"} callback:nil];
	   }

.. tabbed:: Swift

    .. code-block:: swift

	   /// Call projectAPI.funcName from Alan Studio script
	   func callProjectApi() {
	     /// Provide any params
	     self.button.callProjectApi("script::funcName", withData: ["data":"your data"], callback: nil)
	   }

.. tabbed:: Kotlin

    .. code-block:: java
		
	   /// Call projectAPI.funcName from Alan Studio script
	   fun callProjectApi() {
	     /// Provide any params
	     val params = JSONObject()
	     try {
		   params.put("data", "your data")
	     } catch (e: JSONException) {
		   Log.e("AlanButton", e.message)
	     }
	     alanButton?.callProjectApi("script::funcName", params.toString())
	   }

.. tabbed:: Java

    .. code-block:: java
		
	   /// Call projectAPI.funcName from Alan Studio script
	   void callProjectApi() {
	     /// Provide any params
	     JSONObject params = new JSONObject();
	     try {
		   params.put("data","your data");
	     } catch (JSONException e) {
		   Log.e("AlanButton", e.getMessage());
	     }
	     alanButton.callProjectApi("script::funcName", params.toString());
	   }		   

.. tabbed:: Flutter

    .. code-block:: dart

        _MyHomePageState() {
          /// Call projectAPI.funcName from Alan Studio script
          void _callProjectApi() {
            /// Provide any params with json
            var params = jsonEncode({"data":"your data"});
            AlanVoice.callProjectApi("script::funcName", params);
          }
        }
	
.. tabbed:: Ionic

    .. code-block:: javascript
	
        var myAlanBtn = document.getElementById('myAlanBtn');
		
        myAlanBtn.componentOnReady().then(function () {
          myAlanBtn.callProjectApi("myFunc", {myData: 123}, function (error, result) {
            console.log("cb from myFunc was received", error, result);
          });
        });
	   
.. tabbed:: React Native

    .. code-block:: javascript

        /// Call projectAPI.funcName from Alan Studio script
        callProjectApi() {
          /// Provide any params with json
          AlanManager.callProjectApi(
            'script::funcName', {"data":"your data"},
            (error, result) => {
              if (error) {
                console.error(error);
              } else {
                console.log(result);
              }
            },
          )
        }


playText()
----------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   playText(text:string)	
	
Method for playing voice.

Parameters
~~~~~~~~~~

+------------+------------+----------------------------+
| **Name**   | **Type**   | **Description**            |
+============+============+============================+
| ``text``   | string     | Text that must be played   |
+------------+------------+----------------------------+

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.playText("Hi! I am Alan");

.. tabbed:: Objective-C

    .. code-block:: objective-c

	   /// Play any text via Alan Button
	   - (void)playText {
	     /// Provide text as string param
	     [self.button playText:@"Hi"];
	   }

.. tabbed:: Swift

    .. code-block:: swift

	   /// Play any text via Alan Button
	   func playText() {
	     /// Provide text as string param
	     self.button.playText("Hi")
	   }

.. tabbed:: Kotlin

    .. code-block:: java

	   /// Play any text via Alan Button
	   fun playText() {
	     /// Provide text as string param
	     alanButton?.playText("Hi")
	   }	
	   
.. tabbed:: Java

    .. code-block:: java

	   /// Play any text via Alan Button
	   void playText() {
	     /// Provide text as string param
	     alanButton.playText("Hi");
	   }
 
.. tabbed:: Flutter

    .. code-block:: dart

        _MyHomePageState() {
        /// Play any text via Alan Button
          void _playText() {
            /// Provide text as string param
            AlanVoice.playText("Hi");
          }
        }
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
        var myAlanBtn = document.getElementById('myAlanBtn');

        myAlanBtn.componentOnReady().then(function () {
          myAlanBtn.playText("Hi! I am Alan");
        });
	   
.. tabbed:: React Native

    .. code-block:: javascript

	   /// Play any text via Alan Button
	   playText() {
	     /// Provide text as string param
	     AlanManager.playText("Hi");
	   }


playCommand()
-------------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   playCommand(command:object)


Method for executing a command locally in the client app. The command is handled with the ``onCommand`` handler.

+---------------+------------+-----------------------------------------+
| **Name**      | **Type**   | **Description**                         |
+===============+============+=========================================+
| ``command``   | object     | JSON object that represents a command   |
+---------------+------------+-----------------------------------------+

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.playCommand({command:"navigate", screen: "settings"});

.. tabbed:: Objective-C

    .. code-block:: objective-c
	
        /// Execute any command locally
        - (void)playCommand {
          /// Provide any params
          [self.button playCommand:@{@"action":@"openSomePage"}];
        }

.. tabbed:: Swift

    .. code-block:: swift

	   /// Execute any command locally
	   func playCommand() {
	     /// Provide any params
	     self.button.playCommand(["action":"openSomePage"])
	   }

.. tabbed:: Kotlin

    .. code-block:: java

	   /// Execute any command locally
	   fun playCommand() {
	     /// Provide any params
	     val params = JSONObject()
	     try {
		   params.put("action", "openSomePage")
	     } catch (e: JSONException) {
		   Log.e("AlanButton", e.message)
	     }
	     alanButton?.playCommand(params.toString(), null)
	   }

.. tabbed:: Java

    .. code-block:: java

	   /// Execute any command locally
	   void playCommand() {
	     /// Provide any params
	     JSONObject params = new JSONObject();
	     try {
		   params.put("action","openSomePage");
	     } catch (JSONException e) {
		   Log.e("AlanButton", e.getMessage());
	     }
	     alanButton.playCommand(params.toString(), null);
	   }	

.. tabbed:: Flutter

    .. code-block:: dart

        _MyHomePageState() {
          /// Execute any command locally
          void _playCommand() {
            /// Provide any params with json
            var command = jsonEncode({"action":"openSomePage"});
            AlanVoice.playCommand(command);
          }
        }
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
        var myAlanBtn = document.getElementById('myAlanBtn');

        myAlanBtn.componentOnReady().then(function () {
          myAlanBtn.playCommand({command:"navigate", screen: "settings"});
        });
	   
.. tabbed:: React Native

    .. code-block:: javascript

	   /// Execute any command locally
	   playCommand() {
	     /// Provide any params with json
	     AlanManager.playCommand({"action":"openSomePage"})
	   }

						
activate()
----------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   activate()			

Method for turning on the Alan button programmatically.


Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.activate();

.. tabbed:: Objective-C

    .. code-block:: objective-c
	
        /// Activate Alan button programmatically
        - (void)activate {
          [self.button activate];
        }

.. tabbed:: Swift

    .. code-block:: swift

	    /// Activate Alan button programmatically
	    func activate() {
	      self.button.activate()
	    }

.. tabbed:: Kotlin

    .. code-block:: java

	    /// Activate Alan button programmatically
	    fun activate() {
	      alanButton?.activate()
	    }
		
.. tabbed:: Java

    .. code-block:: java

        /// Activate Alan button programmatically
        void activate() {
          alanButton.activate();
        }


.. tabbed:: Flutter

    .. code-block:: dart

        _MyHomePageState() {
          /// Activate Alan button programmatically
          void _activate() {
            AlanVoice.activate();
          }
        }
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
        var myAlanBtn = document.getElementById('myAlanBtn');

        myAlanBtn.componentOnReady().then(function () {
          myAlanBtn.activate();
        });
	   
.. tabbed:: React Native

    .. code-block:: javascript

        /// Activate Alan button programmatically
        activate() {
          AlanManager.activate();
        }

deactivate()
------------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   deactivate()				

Method for turning off the Alan button programmatically.

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.deactivate();

.. tabbed:: Objective-C

    .. code-block:: objective-c

	    /// Deactivate Alan button programmatically
	    - (void)deactivate {
	      [self.button deactivate];
	    }

.. tabbed:: Swift

    .. code-block:: swift

	    /// Deactivate Alan button programmatically
	    func deactivate() {
	      self.button.deactivate()
	    }

.. tabbed:: Kotlin

    .. code-block:: java

	    /// Deactivate Alan button programmatically
	    fun deactivate() {
	      alanButton?.deactivate()
	    }
	   
.. tabbed:: Java

    .. code-block:: java

        /// Deactivate Alan button programmatically
        void deactivate() {
          alanButton.deactivate();
        }

.. tabbed:: Flutter

    .. code-block:: dart

        _MyHomePageState() {
          /// Deactivate Alan button programmatically
          void _deactivate() {
            AlanVoice.deactivate();
          }
        }
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
        var myAlanBtn = document.getElementById('myAlanBtn');

        myAlanBtn.componentOnReady().then(function () {
          myAlanBtn.deactivate();
        });
	   
.. tabbed:: React Native

    .. code-block:: javascript

        /// Deactivate Alan button programmatically
        deactivate() {
          AlanManager.deactivate();
        }		
		
		
isActive()
----------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   isActive()				

Method for checking the Alan button state. Returns ``true`` if the Alan button is activated by the user or programmatically or ``false`` if the Alan button is deactivated by the user or programmatically.

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.isActive();

.. tabbed:: Objective-C

    .. code-block:: objective-c

		 [alanBtnInstance isActive];

.. tabbed:: Swift

    .. code-block:: swift

		alanBtnInstance.isActive()

.. tabbed:: Android

    .. code-block:: java

		alanBtnInstance.isActive();

.. tabbed:: Flutter

    .. code-block:: dart

        void _checkIsActive() async {
          var isActive = await AlanVoice.isActive();
          if (isActive) {
            _showDialog("Active");
          } else {
            _showDialog("NOT active");
          }
        }
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
        var myAlanBtn = document.getElementById('myAlanBtn');

        myAlanBtn.componentOnReady().then(function () {
          myAlanBtn.isActive();
        });
		
		
.. tabbed:: React Native

    .. code-block:: javascript

        AlanManager.isActive((error, result) => {
          if (error) {
            console.error(error);
          } else {
            console.log(result);
          }
        })		
		
	
		

.. raw:: html

   <div id="purple-background"></div>