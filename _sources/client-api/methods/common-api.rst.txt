Client API methods
==================

Alan exposes a set of its Client API methods that you can use to enable
communication between the client app and Alan and to trigger voice
activities on the client side.

The methods below are supported on all platforms:

-  `setVisualState()`_
-  `callProjectApi()`_
-  `playText()`_
-  `playCommand()`_
-  `activate()`_
-  `deactivate()`_
-  `isActive()`_


setVisualState()
----------------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   setVisualState(visualStateData:object)

Method for setting the visual state. For details, see `Visual state </server-api/sending-data/visual-state.html>`__.

Parameters
~~~~~~~~~~

+-----------------------+------------+-------------------------------------------+
| **Name**              | **Type**   | **Description**                           |
+=======================+============+===========================================+
| ``visualStateData``   | object     | Object that represents the visual state   |
+-----------------------+------------+-------------------------------------------+


Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		//this is how you can set up a visual state
		alanBtnInstance.setVisualState({data:"your data"});

.. tabbed:: iOS Objective-C

    .. code-block:: objective-c

		[alanBtnInstance setVisualState:@{@"data": @"your data"}];

.. tabbed:: iOS Swift

    .. code-block:: swift

		alanBtnInstance.setVisualState(["data": "your data"])

.. tabbed:: Android

    .. code-block:: java

	 	JSONObject visualState = new JSONObject("{\"data\":\"your data\"}");
		alanBtnInstance.setVisualState(visualState.toString());		

.. tabbed:: Flutter

    .. code-block:: dart

		void _setVisualState() {
			/// Provide any params with json
			var visualState = jsonEncode({"visualState": "stateValue"});
			AlanVoice.setVisualState(visualState);
		}

.. tabbed:: Ionic

    .. code-block:: javascript

		var myAlanBtn = document.getElementById('myAlanBtn');

		myAlanBtn.componentOnReady().then(function () {
			myAlanBtn.setVisualState({screen: 'homePage'});
		});
	   
.. tabbed:: React Native

    .. code-block:: javascript
	
	    AlanManager.setVisualState({"visualStateName": "visualStateValue"})
		

callProjectApi()
----------------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   callProjectApi(method:string, data:object, callback:function)
		

Method for calling a project API defined in the script in the Alan Studio project. For details, see `Project
API </server-api/sending-data/project-api.html>`__.

Parameters
~~~~~~~~~~

+----------------+------------+---------------------------------------------------------------------+
| **Name**       | **Type**   | **Description**                                                     |
+================+============+=====================================================================+
| ``method``     | string     | project API method name that is defined in the voice script         |
+----------------+------------+---------------------------------------------------------------------+
| ``data``       | object     | Any object with custom data that must be sent to the voice script   |
+----------------+------------+---------------------------------------------------------------------+
| ``callback``   | function   | Callback that can be called from the project API method             |
+----------------+------------+---------------------------------------------------------------------+

.. code:: js

    // Voice script where your method defined like this:
    projectAPI.setClientData = function(p, param, callback) {
      p.userData = param;
      callback();
    };

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		// This is how you can call clientAPI.setClientData function
		alanBtnInstance.callProjectApi("setClientData", {value:"your data"}, function (error, result){
			// handle error and result here
		});

.. tabbed:: iOS Objective-C

    .. code-block:: objective-c

		[alanBtnInstance callProjectApi:@"setClientData" withData:@{@"value": @"your data"} callback:^(NSError *error, NSString *object) {
			// handle error and result here
		}];

.. tabbed:: iOS Swift

    .. code-block:: swift

		alanBtnInstance.callProjectApi("setClientData", withData: ["value": "your data"]) { (_, _) in
			// handle error and result here
		}

.. tabbed:: Android

    .. code-block:: java
		
		JSONObject callParameters = new JSONObject("{\"value\":\"your data\"}");
		
		alanBtnInstance.callProjectApi("setClientData", callParameters.toString(), new ScriptMethodCallback() {
			@Override
            public void onResponse(String methodName, String body, String error) {
                // handle error and result here
            }
        });		

.. tabbed:: Flutter

    .. code-block:: dart

		void _callProjectApi() {
			/// Provide any params with json
			var params = jsonEncode({"apiParams": "paramsValue"});
			AlanVoice.callProjectApi("projectAPI", params);
		}
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
		var myAlanBtn = document.getElementById('myAlanBtn');
		
		myAlanBtn.componentOnReady().then(function () {
			myAlanBtn.callProjectApi("myFunc", {myData: 123}, function (error, result) {
				console.log("cb from myFunc was received", error, result);
			});
		});
	   
.. tabbed:: React Native

    .. code-block:: javascript

		AlanManager.callProjectApi(
			'customScript',
			{text: this.state.apiValue},
			(error, result) => {
				if (error) {
					console.error(error);
				} else {
					console.log(result);
				}
			},
		)


playText()
----------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   playText(text:string)	
	
Method for playing voice.

Parameters
~~~~~~~~~~

+------------+------------+----------------------------+
| **Name**   | **Type**   | **Description**            |
+============+============+============================+
| ``text``   | string     | Text that must be played   |
+------------+------------+----------------------------+

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.playText("Hi! I am Alan");

.. tabbed:: iOS Objective-C

    .. code-block:: objective-c

		[alanBtnInstance playText:@"Hi! I am Alan"];

.. tabbed:: iOS Swift

    .. code-block:: swift

		alanBtnInstance.playText("Hi! I am Alan")

.. tabbed:: Android

    .. code-block:: java

		alanBtnInstance.playText("Hi! I am Alan");	

.. tabbed:: Flutter

    .. code-block:: dart

		void _playText() {
		    /// Provide text as string param
            AlanVoice.playText("Hello from Alan");
        }
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
		var myAlanBtn = document.getElementById('myAlanBtn');

		myAlanBtn.componentOnReady().then(function () {
			myAlanBtn.playText("Hi! I am Alan");
		});
	   
.. tabbed:: React Native

    .. code-block:: javascript

		AlanManager.playText("Hello from Alan")


playCommand()
-------------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   playCommand(command:object)


Method for executing a command locally in the client app. The command is handled with the ``onCommand`` handler.

+---------------+------------+-----------------------------------------+
| **Name**      | **Type**   | **Description**                         |
+===============+============+=========================================+
| ``command``   | object     | JSON object that represents a command   |
+---------------+------------+-----------------------------------------+

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.playCommand({command:"navigate", screen: "settings"});

.. tabbed:: iOS Objective-C

    .. code-block:: objective-c

		 [alanBtnInstance playCommand:@{@"command": @"navigate", @"screen": @"settings"}];

.. tabbed:: iOS Swift

    .. code-block:: swift

		alanBtnInstance.playCommand(["command": "navigate", "screen": "settings"])

.. tabbed:: Android

    .. code-block:: java

		JSONObject commandJson = new JSONObject("{\"command\":\"navigate\", \"screen\": \"settings\"}");
        alanBtnInstance.playCommand(commandJson.toString(),  new ScriptMethodCallback() {
            @Override
            public void onResponse(String methodName, String body, String error) {
                // handle error and result here
			}
		});	

.. tabbed:: Flutter

    .. code-block:: dart

		void _playCommand() {
			/// Provide any params with json
			var command = jsonEncode({"command": "commandName"});
			AlanVoice.playCommand(command);
		}
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
		var myAlanBtn = document.getElementById('myAlanBtn');

		myAlanBtn.componentOnReady().then(function () {
			myAlanBtn.playCommand({command:"navigate", screen: "settings"});
		});
	   
.. tabbed:: React Native

    .. code-block:: javascript

		AlanManager.playCommand({"command": "commandName"})

						
activate()
----------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   activate()			

Method for turning on the Alan button programmatically.


Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.activate();

.. tabbed:: iOS Objective-C

    .. code-block:: objective-c

		 [alanBtnInstance activate];

.. tabbed:: iOS Swift

    .. code-block:: swift

		alanBtnInstance.activate()

.. tabbed:: Android

    .. code-block:: java

		alanBtnInstance.activate();

.. tabbed:: Flutter

    .. code-block:: dart

		void _activate() {
           AlanVoice.activate();
		}
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
		var myAlanBtn = document.getElementById('myAlanBtn');

		myAlanBtn.componentOnReady().then(function () {
			myAlanBtn.activate();
		});
	   
.. tabbed:: React Native

    .. code-block:: javascript

		AlanManager.activate()

deactivate()
------------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   deactivate()				

Method for turning off the Alan button programmatically.

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.deactivate();

.. tabbed:: iOS Objective-C

    .. code-block:: objective-c

		 [alanBtnInstance deactivate];

.. tabbed:: iOS Swift

    .. code-block:: swift

		alanBtnInstance.deactivate()

.. tabbed:: Android

    .. code-block:: java

		alanBtnInstance.deactivate();

.. tabbed:: Flutter

    .. code-block:: dart

		void _activate() {
           AlanVoice.deactivate();
		}
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
		var myAlanBtn = document.getElementById('myAlanBtn');

		myAlanBtn.componentOnReady().then(function () {
			myAlanBtn.deactivate();
		});
	   
.. tabbed:: React Native

    .. code-block:: javascript

		AlanManager.deactivate()
		
		
		
isActive()
----------

Syntax
~~~~~~

.. admonition:: Function syntax
   :class: syntax

   isActive()				

Method for checking the Alan button state. Returns ``true`` if the Alan button is activated by the user or programmatically or ``false`` if the Alan button is deactivated by the user or programmatically.

Examples
~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		alanBtnInstance.isActive();

.. tabbed:: iOS Objective-C

    .. code-block:: objective-c

		 [alanBtnInstance isActive];

.. tabbed:: iOS Swift

    .. code-block:: swift

		alanBtnInstance.isActive()

.. tabbed:: Android

    .. code-block:: java

		alanBtnInstance.isActive();

.. tabbed:: Flutter

    .. code-block:: dart

		void _checkIsActive() async {
			var isActive = await AlanVoice.isActive();
			if (isActive) {
				_showDialog("Active");
			} else {
				_showDialog("NOT active");
			}
		}
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
		var myAlanBtn = document.getElementById('myAlanBtn');

		myAlanBtn.componentOnReady().then(function () {
			myAlanBtn.isActive();
		});
     
	   
.. tabbed:: React Native
   
	.. code-block:: javascript

		AlanManager.isActive((error, result) => {
            if (error) {
				console.error(error);
			} else {
				console.log(result);
			}
		})