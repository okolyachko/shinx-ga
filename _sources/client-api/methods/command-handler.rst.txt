onCommand handler
=================

Responsible for handling commands sent from the Alan voice script.

To accompany user’s utterances with activities in the app UI, you can send commands from the voice scripts to the client app. For example, once the user gives a voice command, another view or page can be opened in the app, a UI element can be selected on the screen and so on.

To send a command, use the ``play()`` function in the voice script and pass a JSON object to it. The JSON object contains the command name and, optionally, arbitrary data to be provided to the app. To handle the command on the client side, set up the logic in the ``onCommand`` handler in the app.

For details, see `Sending commands to the app <../../server-api/commands-and-responses.html#sending-commands-to-the-app>`__.

Examples
--------

Voice script
~~~~~~~~~~~~

.. code:: javascript

   intent(`Go to the home page`, p => {
       p.play({command: 'navigation', route: 'home'});
       p.play(`Opening the home page...`);
   });

Client app
~~~~~~~~~~

.. tabbed:: Web

    .. code-block:: javascript

		onCommand: function (commandData) {
			if (commandData.command === "navigation") {
				//call client code that will react on the received command
			}
		},

.. tabbed:: Objective-C

    .. code-block:: obj-c

		 alanButton.onCommand = ^(NSDictionary *command) {
		   NSString* commandName = [command objectForKey:@"command"];
				 if(commandName isEqualToString:@"navigation")
				 {
					 //call client code that will react on the received command
				 }
		 };

.. tabbed:: Swift

    .. code-block:: swift

		alanButton.onCommand = { (commandDictionary : [AnyHashable : Any]?) in
			guard let commandData = commandDictionary as? [String: Any],
				let commandName = commandData["command"] as? String,
			else {
				return
				}
				if(commandName == “navigation”) {
					//call client code that will react on the received command
				}
			}

.. tabbed:: Kotlin

    .. code-block:: kotlin

		// Client app
		alan_button.registerCallback( object : AlanCallback() {
		   //Handle commands received from the app
		   override fun onCommand(eventCommand: EventCommand?) {
			  //call client code that will react to the received command
		   }
		})
		
.. tabbed:: Java

    .. code-block:: java

		alanButton.registerCallback(new AlanCallback() {
			@Override
			public void onCommand(EventCommand eventCommand) {
				// Call client code that will react to the received command
			}
		});

.. tabbed:: Flutter

    .. code-block:: dart

		AlanVoice.onCommand.add((command) {
			 debugPrint("got new command ${command.toString()}");
		});
		
.. tabbed:: Ionic

    .. code-block:: typescript
	
		this.alanBtnComponent.nativeElement.addEventListener('command', (data) => {
			const commandData = (data).detail;
		​
			if (commandData.command === 'navigation') {
				//call client code that will react to the received command
			}
		});
     
	   
.. tabbed:: React Native
   
	.. code-block:: javascript

		import { NativeEventEmitter, NativeModules } from 'react-native';
		const { AlanManager, AlanEventEmitter } = NativeModules;
		const alanEventEmitter = new NativeEventEmitter(AlanEventEmitter);

		alanEventEmitter.addListener('onCommand', (data) => {
			console.log(`onCommand: ${JSON.stringify(data)}`);
		});
		
.. raw:: html

   <div id="purple-background"></div>