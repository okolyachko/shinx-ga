onButtonState handler
=====================

Responsible for handling the Alan button state change events.

When the user launches an app with the Alan button, Alan connects to the
project in the Alan Cloud, and the Alan button transitions through
several states:

-  **CONNECTING**: Alan is connecting to your voice assistant project in
   the Alan Cloud
-  **ONLINE**: a connection to the project is established
-  **LISTEN**: Alan is listening to the user input
-  **PROCESS**: Alan is processing the user input
-  **REPLY**: Alan is replying to the user
-  **OFFLINE**: no connection to the Internet; the connection to the
   Alan Studio project cannot be established

If you need to perform activities in the app while the Alan button is in
a specific state, you can use the ‘onButtonState’ handler to listen to
the Alan button state changes.

Examples
--------

.. tabbed:: Web

    .. code-block:: javascript

		var alanBtnInstance = alanBtn({
			key: "a552799e77cd7970091cb1f9fc484b652e956eca572e1d8b807a3e2338fdd0dc/stage",
			onButtonState: function (e) {
				console.info('onButtonState', e);
			},
		rootEl: document.getElementById("alan-btn"),
	});

.. tabbed:: Objective-C

    .. code-block:: obj-c

		 alanButton.onButtonState = ^(AlanSDKButtonState state) {
			switch (state)
			{
				case AlanSDKButtonStateOffline:
					break;
				case AlanSDKButtonStateConnecting:
					break;
				case AlanSDKButtonStateListen:
					break;
				case AlanSDKButtonStateProcess:
					break;
				case AlanSDKButtonStateReply:
					break;
				case AlanSDKButtonStateOnline:
					break;
				case AlanSDKButtonStateIdle:
					break;
				default:
					break;
			}
		};

.. tabbed:: Swift

    .. code-block:: swift

		alanButton.onButtonState = { (state: AlanSDKButtonState) in
			switch state {
					case .online:
						break
					case .offline:
						break
					case .connecting:
						break
					case .listen:
						break
					case .process:
						break
					case .reply:
						break
					default:
						break
			}
		}

.. tabbed:: Kotlin

    .. code-block:: kotlin

		alanButton.registerCallback(object : AlanCallback() {
			override fun onAlanStateChanged(alanState: AlanState) {
				// use button state
			}
		})
		
.. tabbed:: Java

    .. code-block:: java

		alanButton.registerCallback(new AlanCallback() {
			@Override
			public void onButtonState(AlanState alanState) {
				// use button state
			}
		});

.. tabbed:: Flutter

    .. code-block:: dart

		AlanVoice.onButtonState.add((state) {
			debugPrint("Got new button state ${state.name}");
		});
		
.. tabbed:: Ionic

    .. code-block:: javascript
	
		this.alanBtnComponent.nativeElement.addEventListener('buttonState', (data) => {
			const buttonState = (data).detail;
			this.buttonStatusSectionEl.nativeElement.innerText = this.buttonStatusSectionEl.nativeElement.innerText + buttonState + '\n';
		});
			 
	   
.. tabbed:: React Native
   
	.. code-block:: javascript

		import { NativeEventEmitter, NativeModules } from 'react-native';
		const { AlanManager, AlanEventEmitter } = NativeModules;
		const alanEventEmitter = new NativeEventEmitter(AlanEventEmitter);

		alanEventEmitter.addListener('onButtonState', (state) => {
			console.log(`onButtonState: ${JSON.stringify(state)}`);
		});