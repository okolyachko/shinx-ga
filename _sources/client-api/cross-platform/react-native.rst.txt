Alan React Native Framework
===========================

**Available on**: :badge:`Android,badge-info` :badge:`iOS,badge-success`

Integrating with Alan
---------------------

To add Alan voice to a React Native app, you need to do the following:

1. `Set up the environment <#step-1-set-up-the-environment>`__
2. `Install the Alan React Native plugin <#step-2-install-the-alan-react-native-plugin>`__
3. `Add the Alan button to the app <#step-3-add-the-alan-button-to-the-app>`__
4. `Run the app on iOS <#running-the-app-on-ios>`__ or `run the app on Android <#running-the-app-on-android>`__ or `use the debug mode <#running-the-app-in-the-debug-mode>`__

Step 1. Set up the environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before you start integrating a React Native app with Alan, make sure all necessary tools are installed on your computer.

-  Install ``react-native-cli`` globally:

   .. code:: bash
   
      npm install -g react-native-cli

-  (For iOS) Install CocoaPods to manage dependencies for Xcode projects:

   .. code:: bash

       sudo gem install cocoapods

Step 2. Install the Alan React Native plugin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To add the Alan React Native plugin to your app:

1. Navigate to the app folder:

   .. code:: bash

       cd myapp

2. Install the plugin:

   ::

       npm i @alan-ai/alan-sdk-react-native --save


Step 3. Add the Alan button to the app
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once the plugin is installed, you need to add the Alan button to your React Native app.

1. Add the Alan button and Alan text panel to the app. In the app folder, open ``App.js`` and add the following import statement at the top of the file:

   .. code:: typescript

       import { AlanView } from '@alan-ai/alan-sdk-react-native';

2. In the ``App.js`` file, add a view with the Alan button and Alan text panel:

   .. code:: typescript

       return (
         <AlanView
           projectid={
             ''
           }
         />
       );

3. In ``projectID``, specify the Alan SDK key for your Alan Studio project. To get the key, in Alan Studio, at the top of the code editor, click **Integrations** and copy the value from the **Alan SDK Key** field.

   .. code:: typescript

       return (
         <AlanView
           projectid={
             'cc2b0aa23e5f90d2974f1bf6b6929c1b2e956eca572e1d8b807a3e2338fdd0dc/prod'
           }
         />
       );

4. You need to add a listener for events that will be coming from the Alan voice script. To start listening for events, in ``App.js``, add the following import statement:

   .. code:: typescript
       
	   import { NativeEventEmitter, NativeModules } from 'react-native';

5. In ``App.js``, create a new ``NativeEventEmitter`` object:

   .. code:: typescript

       const { AlanManager, AlanEventEmitter } = NativeModules;
       const alanEventEmitter = new NativeEventEmitter(AlanEventEmitter);

6. And subscribe to the voice script events:

   .. code:: typescript
   
       const subscription = alanEventEmitter.addListener('command', (data) => {
         console.log(`got command event ${JSON.stringify(data)}`);
       });

7. Do not forget to remove the listener in your ``App()`` class:

   .. code:: typescript

       componentWillUnmount() {
         subscription.remove();
       }
	   
.. note::

	  
   Regularly update the Alan AI package your project depends on. To check if a newer version is available, run ``npm outdated``. To update the package, run ``npm update @alan-ai/alan-sdk-react-native``. For more details, see `npm documentation <https://docs.npmjs.com/updating-packages-downloaded-from-the-registry>`__.
	   

Running the app on iOS
----------------------

To run your app integrated with Alan on the iOS platform, you need to update the app settings for iOS.

1. In the Terminal, navigate to the ``ios`` folder in your app:

   .. code:: bash

       cd ios

2. In the ``ios`` folder, open the Podfile and change the minimum iOS version to 11:

   .. code:: ruby

       platform :ios, '11.0'
       ...

3. In the Terminal, run the following command to install dependencies for the project:

   .. code:: bash

       pod install

4. In the ``ios`` folder, open the generated XCode workspace file: ``<appname>.xcworkspace``. You should use this file to open your Xcode project from now on.

5. In iOS, the user must explicitly grant permission for an app to `access the user's data and resources <https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessing-user-data/>`__. An app with the Alan button requires access to:

   - User's device microphone for voice interactions
   - User's device camera for testing Alan projects on mobile

   To comply with this requirement, you must add ``NSMicrophoneUsageDescription`` and ``NSCameraUsageDescription`` keys to the ``Info.plist`` file of your app and provide a message why your app requires access to the microphone and camera. The message will be displayed only when Alan needs to activate the microphone or camera.
   

   To add the keys:

   a. In Xcode, go to the **Info** tab.

   b. In the **Custom iOS Target Properties** section, hover over any key in the list and click the plus icon to the right.

   c. From the list, select **Privacy - Microphone Usage Description**.

   d. In the **Value** field to the right, provide a description for the added key. This description will be displayed to the user when the app is launched.

   e. Repeat the steps above to add the **Privacy - Camera Usage Description** key.

   .. image:: /_static/assets/img/ios-quickstart-objc/pods-mic.png
      
6. In the Terminal, navigate to the app folder, up one folder level:

   .. code:: bash

       cd ..

7. To run your app on the iOS platform, use one of the following command:

   .. code:: bash

       react-native run-ios
       yarn ios
     

You can also open the ``<appname>.xcworkspace`` file in XCode and test drive the app on the simulator or device.

Running the app on Android
--------------------------

To run your React Native app integrated with Alan on the Android platform:

1. Make sure the correct minimum SDK version is set for your app: ``minSdkVersion 21``. To check the version, open the
   ``/android/app/build.gradle`` file, under ``defaultConfig``, locate ``minSdkVersion`` and update its value if necessary.

2. To run your app on the Android platform, use one of the following command:

   .. code:: bash

       react-native run-android
       yarn android
       

You can also launch the app from the Android Studio: open ``<app>/android`` in the IDE and run the app in a usual way.

Running the app in the Debug mode
---------------------------------

You can run your app on iOS or Android in the debug mode. The debug mode allows you to hot reload the app on the device or simulator as soon as you update anything in the app.

To run the app in the debug mode, make sure the Metro bundler is started. To start the Metro bundler, in the Terminal, run the following command:

.. code:: bash

   react-native start

The Terminal window with the Metro bundler will be launched. You can then run your app as usual with the following commands:

-  For iOS: 

   .. code:: bash
   
       react-native run-ios
       yarn ios
	   
-  For Android: 

   .. code:: bash
       
       react-native run-android
       yarn android

.. note::

   After integration, you may get a warning related to the ``onButton`` state. You can safely ignore it: the warning will be removed as soon as you add the :doc:`onCommand handler <../../client-api/methods/command-handler>` to your app. 
   
   
Specifying the Alan button parameters
-------------------------------------

You can specify the following parameters for the Alan button added to your app:

+--------------------------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
| **Name**                             | **Type**      | **Description**                                                                                                                                    |
+======================================+===============+====================================================================================================================================================+
| ``projectid``                        | string        | The Alan SDK key for a project in Alan Studio.                                                                                                     |
+--------------------------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
| ``authData``                         | JSON object   | The authentication or configuration data to be sent to the voice script. For details, see :doc:`authData <../../server-api/sending-data/authdata>`.|
+--------------------------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------+


Using the Alan button methods
-----------------------------

For details on methods exposed by the Alan React Native SDK, see :doc:`Client API methods <../methods/common-api>`.


Handling events
---------------

When you run an app with Alan voice, multiple events come from the Alan backend. You can handle the following events:

-  **onCommand**: this callback is invoked when the app receives a command from the voice script. For details, see :doc:`onCommand handler <../methods/command-handler>`.

-  **onButtonState**: this callback is invoked when the Alan button state changes. For details, see :doc:`onButtonState handler <../methods/state-handler>`.

-  **onEvent**: this callback is invoked on Alan events. For details, see :doc:`onEvent handler <../methods/event-handler>`.
   
   
Troubleshooting
---------------

- If you encounter the following error: ``Execution failed for task ':app:mergeDebugNativeLibs'``, open the ``build.gradle`` file at the ``Module`` level and add packaging options:

  .. code:: bash
   
      android {
        ...
        packagingOptions {
          pickFirst 'lib/arm64-v8a/libc++_shared.so'
          pickFirst 'lib/x86/libc++_shared.so'
          pickFirst 'lib/x86_64/libc++_shared.so'
          pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        }
        ...
      }

- The minimum possible Android SDK version required by the Alan SDK is 21. If the version in your project is lower, you may encounter the following error: ``AndroidManifest.xml Error: uses-sdk:minSdkVersion 16 cannot be smaller than version 21 declared in library [:alan_voice]``. Open the ``app/android/build.gradle`` file, under ``defaultConfig``, locate ``minSdkVersion`` and change the version to 21.

What's next?
------------

You can now proceed to building a voice interface with Alan. Use the following resources:

- Read tutorials on React Native:

  - :doc:`Sending commands to the app <../../tutorials/react-native/sending-commands-react-native>`
  - :doc:`Passing the app state to the voice script <../../tutorials/react-native/sending-state-react-native>`
  - :doc:`Triggering activities without voice commands <../../tutorials/react-native/triggering-activities-react-native>`
  - :doc:`Navigating between screens with voice </tutorials/react-native/navigating-react-native>`
  
-  Go to :doc:`Script concepts <../../server-api/script-concepts>` to learn about Alan concepts and functionality you can use to create a voice script.


.. raw:: html

   <div id="purple-background"></div>