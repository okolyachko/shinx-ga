Alan Flutter Framework
======================

**Available on**: :badge:`Android,badge-info` :badge:`iOS,badge-success`

.. raw:: html

   <a href="https://pub.dev/packages/alan_voice">
   <img src="https://img.shields.io/pub/v/alan_voice?logo=Flutter&style=for-the-badge" align="left" /></a>
   
   <br/><br/>

.. raw:: html

   <div class="video-container">
   <iframe class="responsive-iframe" src="https://www.youtube.com/embed/Dxgx0MI3ENk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

   
The Alan Flutter plugin helps you to integrate your voice experience and Alan Studio script into your Flutter app.

.. note::

   The ``alan_voice`` package version 3.0.0 supports null safety. If your app does not use null safety yet, upgrade the Dart version to 2.12 or higher or use a previous version of the ``alan_voice`` package.

Integrating with Alan
---------------------

To integrate a Flutter app with Alan:

1. In the ``pubspec.yaml`` file of your Flutter project, add the Alan voice dependency:

   .. code:: yaml

       /// pubspec.yaml file
       ...
       dependencies:
         flutter:
           sdk: flutter
           ...

         alan_voice: 2.4.0

2. Open the ``main.dart`` file and at the top of it, add the ``alan_voice`` package dependency:

   .. code:: dart

       /// main.dart file
       ...
       import 'package:alan_voice/alan_voice.dart';

3. In the ``_MyHomePageState`` class, add the method for initializing the Alan button:

   .. code:: dart

       /// main.dart file
       ...
       class _MyHomePageState extends State<MyHomePage> {
       ...
         _MyHomePageState() {
           /// Initializing Alan with sample project id
           AlanVoice.addButton(
             "",
             buttonAlign: AlanVoice.BUTTON_ALIGN_LEFT);
        }
       ...

4. In Alan Studio, go to **Integrations**, copy the value from the **Alan SDK Key** field and insert this value in the quotes.

   .. code:: dart

       /// main.dart file
       ...
       class _MyHomePageState extends State<MyHomePage> {
       ...
         _MyHomePageState() {
           /// Initializing Alan with sample project id
           AlanVoice.addButton(
             "314203787ccd9370974f1bf6b6929c1b2e956eca572e1d8b807a3e2338fdd0dc/prod",
             buttonAlign: AlanVoice.BUTTON_ALIGN_LEFT);
         }
       ...

That's it. Now you can run the app, tap the Alan button and start interacting with Alan.

Specifying the Alan button parameters
-------------------------------------

You can specify the following parameters for the Alan button added to your app:

+--------------------------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
| **Name**                             | **Type**      | **Description**                                                                                                                                    |
+======================================+===============+====================================================================================================================================================+
| ``projectId``                        | string        | The Alan SDK key for a project in Alan Studio.                                                                                                     |
+--------------------------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
| ``authJson``                         | JSON object   | The authentication or configuration data to be sent to the voice script. For details, see :doc:`authData <../../server-api/sending-data/authdata>`.|
+--------------------------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------+
| ``buttonAlign``                      | Int           | The Alan button position in the app. Use one of the two constants: ``BUTTON_ALIGN_LEFT`` or ``BUTTON_ALIGN_RIGHT``.                                |
+--------------------------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------+


Using the Alan button methods
-----------------------------

For details on methods exposed by the Alan Flutter SDK, see :doc:`Client API methods <../methods/common-api>`.


Handling events
---------------

When you run an app with Alan voice, multiple events come from the Alan backend. You can handle the following events:

-  **onCommand**: this callback is invoked when the app receives a command from the voice script. For details, see :doc:`onCommand handler <../methods/command-handler>`.

-  **onButtonState**: this callback is invoked when the Alan button state changes. For details, see :doc:`onButtonState handler <../methods/state-handler>`.

-  **onEvent**: this callback is invoked on Alan events. For details, see :doc:`onEvent handler <../methods/event-handler>`.


Switching between logging levels
--------------------------------

By default, Alan does not log its system events such as change of the Alan button state to the IDE console. If you want to see messages from Alan, switch to the ``all`` logging level:

.. code:: dart

    AlanVoice.setLogLevel("all");

To disable logs, either remove the line above or switch to the ``none`` logging level:

.. code:: dart

    AlanVoice.setLogLevel("none");
	

Troubleshooting
---------------

To troubleshoot problems you may have with your Flutter app, check the
solutions below:

-  The minimum possible Android SDK version required by the Alan SDK is 21. If the version in your project is lower, you may encounter the following error: ``AndroidManifest.xml Error: uses-sdk:minSdkVersion 16 cannot be smaller than version 21 declared in library [:alan_voice]``. Open the ``./android/app/build.gradle`` file, under ``defaultConfig``, locate ``minSdkVersion`` and change the version to 21.

- Starting from version 3.0.0, the ``alan_voice`` package supports null safety. If you encounter the following error: ``Cannot run with sound null safety because dependencies don't support null safety``, upgrade to the latest package version.

Trying Alan sample apps
-----------------------

In our `GitHub repository <https://github.com/alan-ai/alan-sdk-flutter>`__, you can find sample Flutter apps already integrated with Alan. Download these apps to get an idea of how you can voice-enable your app and trigger activities in the app with voice commands.

-  `Alan simple app <https://github.com/alan-ai/alan-sdk-flutter/tree/master/examples/alan_simple_app>`__: an example demonstrating how to integrate Alan with a Flutter app
-  `Flutter Shrine app <https://github.com/alan-ai/alan-sdk-flutter/tree/master/examples/ShrineApp>`__: a shopping app with a voice interface synchronized with the app visual elements

What's next?
------------

You can now proceed to building a voice interface with Alan. Use the following resources:

-  Read tutorials on Flutter: 

   -  :doc:`Navigating between screens in a Flutter app <../../tutorials/flutter/navigating-flutter>`
   -  :doc:`Passing the app state to the voice script <../../tutorials/flutter/sending-data-flutter>`
-  Go to :doc:`Script concepts <../../server-api/script-concepts>` to learn about Alan concepts and functionality you can use to create a voice script.
   
.. raw:: html

   <div id="purple-background"></div>