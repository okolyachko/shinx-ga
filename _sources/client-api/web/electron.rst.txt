Alan Electron Framework
=======================

.. raw:: html
   
   <a href="https://www.npmjs.com/package/@alan-ai/alan-sdk-web">
   <img src="https://img.shields.io/npm/v/@alan-ai/alan-sdk-web.svg" align="left" style="border:inherit; padding-right:10px" /></a>

   <a href="https://github.com/alan-ai/alan-sdk-web/releases">
   <img src="https://img.shields.io/github/v/release/alan-ai/alan-sdk-web" align="left" style="border:inherit"/></a>
   
   <br/>

The Alan button can be added into your Electron application as a JavaScript library or NPM module.

Integrating with Alan
---------------------

1. Install the ``@alan-ai/alan-sdk-web`` package and include the following script tag in the index.html page:

   .. code:: bash

       $ npm install @alan-ai/alan-sdk-web --save

   .. code:: html

       <script src="node_modules/@alan-ai/alan-sdk-web/dist/alan_lib.min.js"></script>

   Or just add the ``alan_lib.js`` library to your index.html page:

   .. code:: html

       <script type="text/javascript" src="https://studio.alan.app/web/lib/alan_lib.min.js"></script>

2. Add the Alan button in the index.html:

   .. code:: html

       <script>
         alanBtn({ 
           key: 'YOUR_KEY_FROM_ALAN_STUDIO_HERE',
           onCommand: (commandData) => {
             if (commandData.command === 'go:back') {
               // Call the client code that will react to the received command
             }
           },
         });
       </script>

For details, see `Alan button parameters <web-api#alan-button-parameters>`__.

Integration example
-------------------

See an example of the Electron app with the Alan button `here <https://github.com/alan-ai/alan-sdk-web/tree/master/examples/alan-example-integration-electron>`__.

.. raw:: html

   <div id="purple-background"></div>
