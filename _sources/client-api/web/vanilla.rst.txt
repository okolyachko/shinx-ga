JavaScript
==========

.. raw:: html
   
   <a href="https://www.npmjs.com/package/@alan-ai/alan-sdk-web">
   <img src="https://img.shields.io/npm/v/@alan-ai/alan-sdk-web.svg" align="left" style="border:inherit; padding-right:10px" /></a>

   <a href="https://github.com/alan-ai/alan-sdk-web/releases">
   <img src="https://img.shields.io/github/v/release/alan-ai/alan-sdk-web" align="left" style="border:inherit"/></a>
   
   <br/>

You can integrate a simple HTML page with Alan using JavaScript without any frameworks.

Integrating with Alan
---------------------

You can add the Alan button to your page in two ways:

- With the npm package 
- In the browser library mode 

.. tabbed:: NPM package

   1. In the Terminal, run the command:

      ::

          npm install @alan-ai/alan-sdk-web --save

   2. Add a ``<div>`` for appending the Alan button:

      .. code:: html

          <div class="alan-btn"></div>

   3. Import the ``alanBtn`` function from the ``@alan-ai/alan-sdk-web`` package and add the Alan button to the page:

      ::

          import alanBtn from "@alan-ai/alan-sdk-web";

          var alanBtnInstance = alanBtn({
              key: "YOUR_KEY_FROM_ALAN_STUDIO_HERE",
              onCommand: function (commandData) {
                  if (commandData.command === "go:back") {
                      // Call the client code that will react to the received command
                  }
              },
              rootEl: document.getElementById("alan-btn"),
          });

.. tabbed:: Browser library mode

   1. Add the ``<script>`` tag to the page:

      ::

          <script type="text/javascript" src="https://studio.alan.app/web/lib/alan_lib.min.js"></script>

   2. Add a ``<div>`` for appending the Alan button:

      .. code:: html

          <div class="alan-btn"></div>

   3. Add the Alan button in the ``<script>`` tag like this:

      ::

       <script>
           var alanBtnInstance = alanBtn({
               key: "YOUR_KEY_FROM_ALAN_STUDIO_HERE",
               onCommand: function (commandData) {
                   if (commandData.command === "go:back") {
                       // Call the client code that will react to the received command
                   }
               },
               rootEl: document.getElementById("alan-btn"),
           });
       </script>

For details, see :ref:`Alan button parameters`.

.. note::
	  
   Regularly update the ``@alan-ai/alan-sdk-web`` package your project depends on. To check if a newer version is available, run ``npm outdated``. To update the alan package, run ``npm update @alan-ai/alan-sdk-web``. For more details, see `npm documentation <https://docs.npmjs.com/updating-packages-downloaded-from-the-registry>`__.

What's next?
------------

Go to :doc:`Script concepts <../../server-api/script-concepts>` to learn about Alan concepts and functionality you can use to create a voice script.

.. raw:: html

   <div id="purple-background"></div>
