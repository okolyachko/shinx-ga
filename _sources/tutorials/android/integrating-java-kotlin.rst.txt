.. raw:: html

   <div id="orange-background"></div>

Building a voice assistant for an Android Java or Kotlin app
============================================================

With Alan's `voice assistant SDK for Android <../../../client-api/android/android-api>`__, you can create a voice assistant or chatbot and embed it to your Android app written in Java or Kotlin. The Alan Platform provides you with all the tools and leverages the industryâ€™s best Automatic Speech Recognition (ASR), Natural Language Understanding (NLU) and Speech Synthesis technologies to quickly build an in-app voice assistant from scratch.

In this tutorial, we will build a simple Android app, add a voice assistant to it and test it. The users will be able to tap the voice assistant button in the app and give custom voice commands, and Alan will reply to them.

.. admonition:: YouTube
   :class: video

   :fa:`youtube-play`
   If you are a visual learner, `watch this tutorial <https://www.youtube.com/watch?v=V2KevCENy70&t>`__ on `Alan AI YouTube Channel <https://www.youtube.com/c/AlanAI>`__.


What you will learn
-------------------

-  How to add a voice assistant to an Android app written in Java or Kotlin
-  How to write custom voice commands for an Android app

What you will need
------------------

To go through this tutorial, make sure the following prerequisites are met:

-  You have `signed up to Alan Studio <https://studio.alan.app/register>`__.
-  You have :doc:`created a project <../../usage/guides/projects>` in Alan Studio.
-  You have set up the Android environment and it is functioning properly. For details, see `Android developers documentation <https://developer.android.com/guide>`__.
- (If testing on an emulator) All virtual microphone settings must be enabled. To check the settings, on the emulator settings bar, click **More (...)** > **Microphone** and make sure all toggles are set to the *On* position.
- (If testing on a device) The device must be connected to the Internet. The Internet connection is required to let the Android app communicate with the voice script run in the Alan Cloud.

.. note:: 
   When you sign up to Alan Studio, Alan adds free interactions to your balance to let you get started. To get additional interactions to your balance, link your Alan account with your GitHub account and give stars to `Alan repositories <https://github.com/alan-ai>`__. For details, see :ref:`Adding free interactions <Adding free interactions>`.


Step 1: Create a starter Android app
------------------------------------

For this tutorial series, we will be using a simple Android app with a tabbed layout. Let's create it.

1. Open the IDE and select to start a new Android project.
2. Select **Tabbed Activity** as the project template. Then click **Next**.
3. Enter a project name, for example, *MyApp*, and select the language: *Java* or *Kotlin*. 
4. The minimum possible Android SDK version required by the Alan SDK is 21. In the **Minimum SDK** list, select *API 21*. Then click **Finish**. 

.. image:: /_static/assets/img/tutorial-java/tutorial-java-install.png

Step 2: Integrate the app with Alan
-----------------------------------

Now we will add the Alan button to the app.

1. Open the ``build.gradle`` file at the module level.
2. In the ``dependencies`` block, add the dependency configuration for the Alan Android SDK. Do not forget to sync the project. 

   .. code:: groovy

      /// build.gradle file at the module level
      dependencies {
        ...
        /// Adding Alan SDK dependency
        implementation 'app.alan:sdk:4.12.0'
      }

3. Next, we need to add the XML layout for the Alan button to the main app activity. Open the ``main_activity.xml`` file, switch to the **Code** view and add the following layout to it:

   .. code:: xml

       <com.alan.alansdk.button.AlanButton
           android:id="@+id/alan_button"
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:layout_gravity="bottom"
           android:visibility="visible"
           app:button_horizontal_align="right"
           app:layout_constraintBottom_toBottomOf="parent"
           app:layout_constraintEnd_toEndOf="parent"/>
		   
4. By default, the Alan button is placed in the bottom right corner of the screen. Use the ``button_horizontal_align`` property to change the button position to ``left`` for the button not to overlap with the floating button already available in the starter app.

   Here is what your ``main_activity.xml`` file should look like:
   
   .. image:: /_static/assets/img/tutorial-java/tutorial-java-xml-button.png

5. Add the ``alanConfig`` object to the app. This object describes the parameters that are provided for the Alan button. To do this, open the ``MainActivity.java`` or ``MainActivity.kt`` file and add the following code to the ``MainActivity`` class:

   .. tabbed:: Java

      .. code:: java
      
          public class MainActivity extends AppCompatActivity {
            ...
            /// Adding AlanButton variable
            private AlanButton alanButton;

           @Override
           protected void onCreate(Bundle savedInstanceState) {
             ...
             /// Defining the project key
             AlanConfig config = AlanConfig.builder().setProjectId("").build();
             alanButton = findViewById(R.id.alan_button);
             alanButton.initWithConfig(config);

             AlanCallback alanCallback = new AlanCallback() {
               /// Handling commands from Alan Studio
               @Override
               public void onCommand(final EventCommand eventCommand) {
                 try {
                   JSONObject command = eventCommand.getData();
                   String commandName = command.getJSONObject("data").getString("command");
                   Log.d("AlanButton", "onCommand: commandName: " + commandName);
                 } catch (JSONException e) {
                   Log.e("AlanButton", e.getMessage());
                 }
               }
             };

             /// Registering callbacks
             alanButton.registerCallback(alanCallback);
           }
         }

   .. tabbed:: Kotlin

      .. code:: kotlin
   
          class MainActivity : AppCompatActivity() {
            ...
            /// Adding AlanButton variable    
            private var alanButton: AlanButton? = null

            override fun onCreate(savedInstanceState: Bundle?) {
              ...
              /// Defining the project key
              val config = AlanConfig.builder().setProjectId("").build()
              alanButton = findViewById(R.id.alan_button)
              alanButton?.initWithConfig(config)

              val alanCallback: AlanCallback = object : AlanCallback() {
                /// Handling commands from Alan Studio
                override fun onCommand(eventCommand: EventCommand) {
                  try {
                    val command = eventCommand.data
                    val commandName = command.getJSONObject("data").getString("command")
                    Log.d("AlanButton", "onCommand: commandName: $commandName")
                  } catch (e: JSONException) {
                    e.message?.let { Log.e("AlanButton", it) }
                  }
                }
              };

              /// Registering callbacks
              alanButton?.registerCallback(alanCallback);
            }
          }

6. In ``setProjectId``, we need to provide the Alan SDK key for our voice project. To get the key, in Alan Studio, at the top of the code editor click **Integrations** and copy the key value from the **Alan SDK Key** field.

   .. image:: /_static/assets/img/tutorial-java/alan-sdk-key.png

7. In the ``MainActivity.java`` or ``MainActivity.kt`` file, import the necessary classes. Here is what your main activity file should look like:

   .. image:: /_static/assets/img/tutorial-java/tutorial-java-builder.png

8. Run the app.

After the app is built, tap the Alan button in the app and say: ``Hello world``.


.. image:: /_static/assets/img/tutorial-java/alan-mobile.png

However, if you try to ask: ``How are you doing?`` Alan will not give an appropriate response. This is because the voice script in Alan Studio does not contain the necessary voice commands so far.


Step 3: Add voice commands
--------------------------

Let's add some :doc:`voice commands <../../server-api/commands-and-responses>` so that we can interact with Alan. In Alan Studio, open the project and in the code editor, add the following intents:

.. code:: javascript

   intent (`What is your name?`, p => {
       p.play(`It's Alan, and yours?`);
   });

   intent (`How are you doing?`, p => {
       p.play(`Good, thank you. What about you?`);
   });

Now tap the Alan button and ask: ``What is your name?`` and ``How are you doing?`` Alan will give responses we have provided in the added intents.

What's next?
------------

You can now go on with building a voice assistant with Alan. Here are some helpful resources:

-  Go to :doc:`Script concepts <../../server-api/script-concepts>` to learn about Alan concepts and functionality you can use to create a voice script.
-  In Alan Git, get the `Android Java example app <https://github.com/alan-ai/alan-sdk-android/tree/master/examples/alan-example-integration-java>`__ or `Android Kotlin example app <https://github.com/alan-ai/alan-sdk-android/tree/master/examples/alan-example-integration-kotlin>`__ . Use this example app to see how integration for Android apps can be implemented.
- Have a look at the next tutorial: :doc:`Navigating in an Android app with voice <navigating-kotlin>`.

