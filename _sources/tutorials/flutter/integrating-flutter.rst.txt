.. raw:: html

   <div id="orange-background"></div>


Building a voice assistant for a Flutter app
============================================

With Alan's :doc:`voice assistant SDK for Flutter <../../client-api/cross-platform/flutter>`, you can create a voice assistant or chatbot and embed it to your Flutter app. The Alan Platform provides you with all the tools and leverages the industryâ€™s best Automatic Speech Recognition (ASR), Natural Language Understanding (NLU) and Speech Synthesis technologies to quickly build an in-app voice assistant from scratch.

In this tutorial, we will build a simple Flutter app with Alan voice and test drive it. The app users will be able to tap the voice assistant and give custom voice commands, and Alan will reply to them.

.. admonition:: YouTube
   :class: video

   :fa:`youtube-play`
   If you are a visual learner, `watch this tutorial <https://www.youtube.com/watch?v=BXp1yGZURUM&t=1s>`__ on `Alan AI YouTube Channel <https://www.youtube.com/c/AlanAI>`__.    
   

What you will learn
-------------------

-  How to add a voice interface to a Flutter app
-  How to write simple voice commands for a Flutter app

What you will need
------------------

To go through this tutorial, make sure the following prerequisites are met:

-  You have signed up to Alan Studio.
-  You have :doc:`created a project <../../usage/guides/projects>` in Alan Studio.
-  You have set up the Flutter environment and it is functioning properly. For details, see `Flutter documentation <https://flutter.dev/docs/get-started/install>`__.
- (If testing on an emulator) All virtual microphone settings must be enabled. To check the settings, on the emulator settings bar, click **More (...)** > **Microphone** and make sure all toggles are set to the *On* position.
- (If testing on a device) The device must be connected to the Internet. The Internet connection is required to let the Android app communicate with the voice script run in the Alan Cloud.

.. note:: 
   When you sign up to Alan Studio, Alan adds free interactions to your balance to let you get started. To get additional interactions to your balance, link your Alan account with your GitHub account and give stars to `Alan repositories <https://github.com/alan-ai>`__. For details, see :ref:`Adding free interactions <Adding free interactions>`.

Step 1: Create a Flutter app
----------------------------

For this tutorial, we will be using a simple Flutter app. Let's create it.

1. Open the IDE and select to start a new Flutter project.
2. Select **Flutter Application** as the project type. Then click **Next**.
3. Enter a project name (for example, *myapp*). Then click **Next**.
4. Click **Finish**.


Step 2: Integrate the app with Alan
-----------------------------------

Now we will add the Alan button to our app. Do the following: 

1. In the Flutter project, open the ``pubspec.yaml`` file. Under ``dependencies``, add the Alan voice dependency: ``alan_voice: x.x.x``. To make sure you import the latest package version, check the `alan\_voice package page <https://pub.dev/packages/alan_voice>`__.


   .. code:: dart

      ...
      dependencies:
        flutter:
          sdk: flutter
          ...
        alan_voice: 3.0.0
      ...

2. In the ``lib`` folder, open the ``main.dart`` file. At the top of the file, add the following import statement:

   .. code:: dart

      import 'package:alan_voice/alan_voice.dart';
	  
   .. image:: /_static/assets/img/tutorial4/flutter-main-dart.png

3. In the ``main.dart`` file, locate the ``_MyHomePageState`` class. To this class, add the ``_MyHomePageState()`` method for initializing the Alan button:

   .. code:: dart

       class _MyHomePageState extends State<MyHomePage> {
       ...
           _MyHomePageState() {
             /// Init Alan Button with project key from Alan Studio      
             AlanVoice.addButton(
               "", 
               buttonAlign: AlanVoice.BUTTON_ALIGN_LEFT);

             /// Handle commands from Alan Studio
             AlanVoice.onCommand.add((command) {
               debugPrint("got new command ${command.toString()}");
             });
           }
       ...
       }

4. We need to add the key for our Alan Studio project. In Alan Studio, at the top of the code editor, click **Integrations** and copy the code provided in the **Alan SDK Key** field.

   Then paste the copied code between the quotes:

   .. code:: dart

       class _MyHomePageState extends State<MyHomePage> {
           ...
           _MyHomePageState() {
             /// Init Alan Button with project key from Alan Studio      
             AlanVoice.addButton(
               "976d23299e2cfbc77d43485dbc3cb44a2e956eca572e1d8b807a3e2338fdd0dc/stage", 
               buttonAlign: AlanVoice.BUTTON_ALIGN_LEFT);

             /// Handle commands from Alan Studio
             AlanVoice.onCommand.add((command) {
               debugPrint("got new command ${command.toString()}");
             });
           }
       ...
       }

5. Run the app.

After the app is built, it will be launched on the emulator or connected device. In the bottom left corner, tap the Alan button and say: ``Hello world``.

.. image:: /_static/assets/img/tutorial4/alan-mobile.png

However, if you try to ask: ``How are you doing?`` Alan will not give an appropriate response. This is because the voice script in Alan Studio does not contain the necessary voice commands so far.

Step 3: Add voice commands
--------------------------

Let's add some :doc:`voice commands <../../server-api/commands-and-responses>` so that we can interact with Alan. In Alan Studio, open the project and in the code editor, add the following intents:

.. code:: javascript

    intent ('What is your name?', p => {
        p.play('It is Alan, and yours?');
    });

    intent ('How are you doing?', p => {
        p.play('Good, thank you. What about you?');
    });

Now in the app tap the Alan button and ask: ``What is your name?`` and ``How are you doing?`` Alan will give responses we have provided in the added intents.


What's next?
------------

You can now proceed to building a voice interface with Alan. Here are some helpful resources:

-  Have a look at the next tutorial: :doc:`Navigating between screens in a Flutter app <navigating-flutter>`.
-  Go to :doc:`Script concepts <../../server-api/script-concepts>` to learn about Alan concepts and functionality you can use to create a voice script.
-  In Alan Git, get the `Flutter example app <https://github.com/alan-ai/alan-sdk-flutter/tree/master/examples/ShrineApp>`__. Use this app to see how integration for Flutter apps can be implemented.
-  In Alan Git, get the Flutter Shrine app. Use this app to explore how a voice interface for a shopping app can be organized. To get voice scripts for this example app, in Alan Studio, click **Create New Project** and select **Flutter Shrine Example**.